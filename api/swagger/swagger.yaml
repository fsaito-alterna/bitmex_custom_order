swagger: "2.0"
info:
  version: "0.0.1"
  title: -ER_Proto_Block_Server
  description: |
    PrototypeのBlock APIサーバ。メインとなるBlockリソースの他に、
    VendorやDeviceTypeといった補助的なリソースが存在する予定だが、プロトタイプの間はこれらはダミー値でもかまわない。
host: ec2-52-198-126-125.ap-northeast-1.compute.amazonaws.com
basePath: /api
schemes:
  - http # Only for prototype
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  AppKey:
    description: |
      暗号化されたDodai App Keyを用いる弱い認証。制限の緩いAPIで用いる。
    type: apiKey
    in: header
    name: Authorization
paths:
  /blocks:
    x-swagger-router-controller: blocks
    get:
      description: |
        Blockのリストを取得する。アプリ利用者であれば誰でも利用できる程度の要求権限を想定。
        _特にクエリパラメータでの絞り込みを行わない場合は、すべてのBlockのリストがレスポンスに含まれる。_
        クエリパラメータの種類は今後必要に応じて拡張する。
      operationId: listBlocks
      security:
        - AppKey: []
      parameters:
        - name: toolId
          in: query
          description: |
            対象とするToolのIDを完全一致で指定する。
            レスポンスには、_指定した文字列に完全一致する`toolId`を持つBlockのみ_が含まれる。
          required: false
          type: string
          pattern: '^[A-Za-z0-9][A-Za-z0-9_]{2,31}$'
        - name: sdkVersion
          in: query
          description: |
            リクエスト元アプリのsdkVersionを指定する。
            レスポンスには、_指定したsdkVersion以下に対応したBlockのみ_が含まれる。

            Note: 現在この値は単なる文字列として保持され、辞書順比較されるため、桁が上がると比較が不正確になる。
            プロトタイプでは対応しないが、正確に比較しようとする場合、
            (1) semantic versioningの強制、
            (2) 内部的には`{ major: integer, minor: integer, patch: integer }`として値を保持して整数比較するべき。
          required: false
          type: string
        - name: deviceId
          in: query
          description: |
            対象とするデバイス種別をIDで指定する。
            レスポンスには、_指定したデバイスで実行可能なBlockのみ_が含まれる。
          required: false
          type: string
        - name: vendorId
          in: query
          description: |
            対象とするベンダーをIDで指定する。
            レスポンスには、_指定したベンダーが開発・管理するBlockのみ_が含まれる。
          required: false
          type: string
        - name: blockType
          in: query
          description: |
            対象とするBlockの種別を指定する。
            レスポンスには、_指定した種別のBlockのみ_が含まれる。
          type: string
          enum:
            - trigger
            - service
            - action
      responses:
        200:
          description: Success
          schema:
            properties:
              blocks:
                description: Blockのリスト
                type: array
                items:
                  $ref: '#/definitions/Block'
        401:
          description: API認証失敗
          schema:
            $ref: '#/definitions/Unauthorized'
    post:
      description: |
        Blockを登録する。ベンダー権限を要求するAPIとなるが、プロトタイプの間はAppKeyで認証する。
      operationId: postBlock
      security:
        - AppKey: [] # In prototype phase only
      parameters:
        - name: body
          in: body
          required: true
          description: |
            Blockオブジェクトに必要な属性を提供する。IDは`toolId`を含む値としてサーバが生成する。
            `input`, `output`は、`blockType`の種類によって必要なもの、指定できるものが異なる。
            例えば、Trigger Blockはそれ自体がApplet動作の起点となるので、`input`は持たない。

            現状のBlockのスキーマ、及び登録時に指定できるプロパティは全てプロトタイプ向けに策定されたものであり、
            製品版に向けてどの部分も変更の可能性がある。
          schema:
            type: object
            required:
              - toolId
              - title
              - description
              - version
              - sdkVersion
              - executor
              - blockType
            properties:
              toolId:
                description: |
                  Blockの種別を示す単位であるToolのID文字列。Blockのグルーピングに用いられる。

                  Block作成時に作成者が指定し、変更されないイミュータブルな値。BlockのIDに反映される。
                  従って、あるBlockは単一のToolグループにのみ属すことができる。
                  例えばスケジュール機能に関するBlockであれば、`"schedule"`という`toolId`を指定する、など。

                  プロトタイプの間は具体的なToolオブジェクトは用意しないので、文字列としての`toolId`のみ利用する。 (`deviceId`や`vendorId`と同様)
                  Blockを登録する際、既存の`toolId`から適当なものを選んでも良いし、新たに作成してもよい。
                  将来的には、`listTools`のようなAPIを用意して既存のToolのリストを取得し、その中から選べるようにする想定。
                $ref: '#/definitions/ToolId'
              title:
                $ref: '#/definitions/I18nObject'
              description:
                $ref: '#/definitions/I18nObject'
              version:
                type: string
              sdkVersion:
                type: string
              executor:
                type: string
              blockType:
                type: string
                enum:
                  - trigger
                  - service
                  - action
              preferences:
                $ref: '#/definitions/BlockSubSchema'
              migration:
                type: object
              input:
                $ref: '#/definitions/BlockSubSchema'
              output:
                $ref: '#/definitions/BlockSubSchema'
      responses:
        201:
          description: 登録成功
          schema:
            $ref: '#/definitions/Block'
        400:
          description: パラメータ不正
          schema:
            $ref: '#/definitions/BadRequest'
        401:
          description: API認証失敗
          schema:
            $ref: '#/definitions/Unauthorized'
  /blocks/{id}:
    x-swagger-router-controller: blocks
    get:
      description: ID指定したBlockを取得する。
      operationId: getBlock
      security:
        - AppKey: [] # In prototype phase only
      parameters:
        - name: id
          in: path
          required: true
          type: string
          pattern: '^[A-Za-z0-9][A-Za-z0-9_]{2,31}-[0-9a-f]{24}$' # BSON ObjectID part is 12 bytes (24 chars) hex string
      responses:
        200:
          description: 取得成功
          schema:
            $ref: '#/definitions/Block'
        401:
          description: API認証失敗
          schema:
            $ref: '#/definitions/Unauthorized'
        404:
          description: 存在しないBlock
          schema:
            $ref: '#/definitions/NotFound'
    delete:
      description: |
        ID指定したBlockを削除する。ベンダー権限を要求するAPIとなるが、プロトタイプではAppKeyで認証する。
        商用版では、Appletに使用されているBlockは削除できない、などのガード条件が必要になりそう。
      operationId: deleteBlock
      security:
        - AppKey: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
          pattern: '^[A-Za-z0-9][A-Za-z0-9_]{2,31}-[0-9a-f]{24}$' # BSON ObjectID part is 12 bytes (24 chars) hex string
      responses:
        204:
          description: 削除成功
        401:
          description: API認証失敗
          schema:
            $ref: '#/definitions/Unauthorized'
        404:
          description: 存在しないBlock
          schema:
            $ref: '#/definitions/NotFound'

# complex objects have schema definitions
definitions:
  I18nObject:
    description: 言語毎の文言を指定できるオブジェクト。
    type: object
    additionalProperties:
      type: string
    example:
      ja: ブロックA
      en: Block A
  BlockSubSchema:
    description: |
      Blockの実行に必要となるパラメータや、Block間の入出力フォーマットなどを規定するオブジェクト。
      Block開発者がJSONスキーマで定義するため、このオブジェクトはいわばメタスキーマとなる。
      JSONスキーマ公式のパターンに、一部独自拡張を加えつつ、制限を課したもの。
      開発者向け: メタスキーマなので、swagger specを読む際に注意すること。
    type: object
    example:
      type: object
      description: |
        （注: このdescriptionフィールドはexample用であり、実際には不要）
        現在時刻の天気を取得するBlockの例
      required:
        - weather
        - rainfall
        - time
      x-field-order:
        - time
        - weather
        - rainfall
      properties:
        weather:
          type: string
          enum:
            - fine
            - cloudy
            - rain
          x-title:
            ja: 天気
            en: Weather
          x-enum-titles:
            fine:
              ja: 晴れ
              en: Fine
            cloudy:
              ja: 曇り
              en: Cloudy
            rain:
              ja: 雨
              en: Rain
        rainfall:
          type: number
          x-title:
            ja: 降水量
            en: Rainfall
          x-unit: mm/h
        time:
          type: string
          format: date-time
          x-title:
            ja: 時刻
            en: Time
    required:
      - type
      - properties
    properties:
      type:
        description: JSONスキーマの`type`。ここでは`object`しか認めない。
        type: string
        enum:
          - object
        default: object
      properties:
        description: |
          JSONスキーマの`properties`。JSONスキーマ公式のパターンに、一部独自拡張を加えつつ、制限を課したもの。
          許可しうる詳細な属性は今後拡張していく想定。
          開発者向け: swagger-editor2.xではこの項目の詳細をUIで表示できない。
        type: object
        additionalProperties:
          type: object
          required:
            - type
          properties:
            type:
              type: string
              description: |
                JSONスキーマの`properties`に定義する属性の`type`。
                現時点では単純なリテラル類（`boolean`, `integer`, `number`, `string`）のみ使用可能としておく。
              enum:
                - boolean
                - integer
                - number
                - string
            enum:
              description: |
                JSONスキーマの`properties`に定義する属性が取りうる値を固定の候補に制限する場合に使用する。
                どのような`type`とも合わせて使用できるが、`type`によるチェックが優先する。
                例えば`{"type":"string","enum":["valid", 0]}`であれば、`"valid"`は認められるが`0`は認められない。
                <https://spacetelescope.github.io/understanding-json-schema/reference/generic.html?highlight=enum#enumerated-values>
              type: array
              # items directive with multiple possible types cannot be specified in swagger 2.0
              example:
                - fine
                - cloudy
                - rain
            format:
              description: |
                JSONスキーマの`properties`に定義する属性が取りうる値に特定のフォーマットを要求する場合に使用する。
                公式・非公式のValidatorが一般に対応しているものと、独自実装が必要なものがあるが、Blockの実装に依存する。
                日時`string`であれば`date-time`、浮動小数点`number`であれば`float`などがOpenAPISpecで定義されている。
              type: string
              example: date-time
            default:
              description: |
                JSONスキーマの`properties`に定義する属性に、デフォルト値を定める。
                `preferences`に使われる場合、`default`を定めてある属性はユーザが指定を省略できる。
                `input`や`output`に使われる場合、`default`を定めてある属性が入力（出力）されなかった場合にはデフォルト値が暗黙に採用される。
              type:
                - boolean
                - integer
                - number
                - string
            x-title:
              description: |
                JSONスキーマの`properties`に定義する属性について、UIで表示する際の名前。拡張フィールド。
                存在しない場合は属性名そのものが表示される。多言語化のため、generic keywordである`title`を置き換えている。
              $ref: '#/definitions/I18nObject'
              example:
                ja: 天気
                en: Weather
            x-description:
              description:
                JSONスキーマの`properties`に定義する属性について、UIで表示する際の説明。拡張フィールド。
                多言語化のため、generic keywordである`description`を置き換えている。
              $ref: '#/definitions/I18nObject'
            x-enum-titles:
              description: |
                JSONスキーマの`properties`に定義する属性について、`enum`オプションで候補値を文字列で指定する場合に、
                それぞれをUI上で表示する際の説明。拡張フィールド。存在しない場合は`enum`オプションで指定した候補値がそのまま表示される。
              type: object
              additionalProperties:
                $ref: '#/definitions/I18nObject'
              example:
                fine:
                  ja: 晴れ
                  en: Fine
                cloudy:
                  ja: 曇り
                  en: Cloudy
                rain:
                  ja: 雨
                  en: Rain
            x-unit:
              description: |
                JSONスキーマの`properties`に定義する属性について、主に`integer`や`number`といった`type`を指定する場合に、
                値の単位を定義しておく属性。拡張フィールド。UIでの表示に用いたり、Appletを作成する際の参考とする。
              type: string
              example: mm/h
      required:
        description: |
          JSONスキーマの`required`。`properties`で定義した属性の中で、必須とするものの配列。
          `properties`に存在していない属性を指定している場合はエラーとなる。
        type: array
        items:
          type: string
      x-field-order:
        description: |
          `properties`で定義した属性をUI上で表示する際の順序を指定する。拡張フィールド。
          主にユーザが設定可能な`preferences`に登場する属性値の順序指定に用いる。
          指定しない場合はUI上での属性値の並び順は不定となる（辞書順に並ぶ可能性もあるが、実装依存）。
        type: array
        items:
          type: string
  Block:
    type: object
    required:
      - id
      - toolId
      - title
      - description
      - version
      - sdkVersion
      - executor
      - blockType
    properties:
      id:
        description: Blockに固有のサーバが生成するID。作成時に指定された`toolId`をprefixとして含む
        type: string
      toolId:
        description: |
          作成時に指定された`toolId`。
          実体としてはIDに含まれているが、利便性のためAPIサーバ上でプロパティとしても抽出しておく。
        $ref: '#/definitions/ToolId'
      title:
        description: Block名
        $ref: '#/definitions/I18nObject'
      description:
        description: Blockの説明
        $ref: '#/definitions/I18nObject'
      version:
        description: Blockのバージョン
        type: string
        example: 1.0.0
      sdkVersion:
        description: Blockの動作に必要なSDKバージョン
        type: string
        example: 1.0.0
      executor:
        description: Blockの機能を実装しているクライアントアプリのクラス名
        type: string
        example: ERYahooWeatherServiceBlockExecutor
      deviceId:
        description: Blockが対応しているデバイスの種類を判別するID
        type: string
      vendorId:
        description: Blockを開発・管理しているベンダーを判別するID
        type: string
      blockType:
        description: Blockの種別を表す値
        type: string
        enum:
          - trigger
          - service
          - action
      preferences:
        description: Block実行のためにユーザ入力を必要とする（あるいはユーザ入力が可能な）パラメータ。
        $ref: '#/definitions/BlockSubSchema'
      migration:
        description: Blockのバージョン更新毎に定義される、パラメータのマイグレーション情報。(要仕様検討)
        type: object
      input:
        description: Blockのinputパラメータ。
        $ref: '#/definitions/BlockSubSchema'
      output:
        description: Blockのoutputパラメータ。
        $ref: '#/definitions/BlockSubSchema'
  ToolId:
    description: |
      ToolのIDとして用いられる、Tool作成者が指定できる文字列。
      Blockのグルーピング単位として用いられる。ある程度Human-readableな文字列を指定してよい。
      アルファベット、数字、区切り文字として`_`を使用できる。ただし先頭には`_`を使用できない。
      文字数は3文字以上32文字以下とする。
    type: string
    pattern: '^[A-Za-z0-9][A-Za-z0-9_]{2,31}$'
    example: 'schedule'
  Tool:
    description: |
      関連するBlockをグルーピングする単位。ある程度Human-readableな文字列をIDとして指定することができ、
      Blockの作成時に作成者がそのBlockに対応するToolのIDを指定することで、グループに所属させる。

      UI上、Appletのカテゴリcategoryからの絞り込みに利用することを想定している。
      category => (多対多) => tool => (一対多) => blockという関係性になり、
      最終的には選択されたcategory/toolに属するblockを利用しているAppletの一覧、という形でユーザがブラウズできる。

      プロトタイプの期間はこのオブジェクトを具体的には使用しない。
      IDのフォーマットのみ定めておき、Blockの作成時には`toolId`としてそのフォーマットに従う文字列を使用しておく。
    type: object
    properties:
      id:
        $ref: '#/definitions/ToolId'
  BadRequest:
    description: |
      400 Bad Requestとともに返却されるエラーオブジェクト。
      API仕様に定めたJSON schemaにマッチしなかった場合などにこのエラーとなる。
      エラー内容は現状では正規化されてはいないが、正規化する場合はDodaiのエラーレスポンス形式に合わせる。
  Unauthorized:
    description: |
      401 Unauthorizedとともに返却されるエラーオブジェクト。
      リクエストヘッダにAppKeyが存在しなかった場合もこのエラーとなる。
      その他、Dodaiから401エラーが帰ってきた場合も該当する。
      エラー内容は現状では正規化されてはいないが、正規化する場合はDodaiのエラーレスポンス形式に合わせる。
  NotFound:
    description: |
      404 Not Foundとともに返却されるエラーオブジェクト。
      指定されたリソースが存在しなかった場合にこのエラーとなる。
